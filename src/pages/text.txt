<template>
  <div>
    <h1>Страница с постами</h1>
    <!-- <my-input v-model="searchQuery" placeholder="Поиск..."/> -->
    <div class="app-btns">
      <my-button
        @click="showDialog"
      >
        Создать 
      </my-button>
      <!-- <my-select
        v-model="selectedSort"
        :options="sortOptions"
      >
      </my-select> -->
    </div>

    <my-dialog v-model:show="dialogVisible">
      <post-form
        @create="createPost"
      />
    </my-dialog>

    <post-list 
      v-bind:posts="sortedAndSearchedPosts"
      @remove="removePost"
      v-if="!isPostsLoading"
    />
    <div v-else>Идет загрузка...</div>
    
    <div 
      v-intersection="{loadMorePosts}" 
      class="observer">
    </div>

  </div>
</template>

<script>
import PostList from '@/Components/PostList.vue'
import PostForm from '@/Components/PostForm.vue'
import axios from 'axios'
import {mapState, mapGetters, mapMutations, mapActions} from 'vuex'

export default {
  components: {
    PostList,
    PostForm,
},
  data() {
    return {
      dialogVisible: false,
    }
  },
  methods: {
    ...mapMutations({
      setPage: 'post/setPage',
    }),
    ...mapActions({
      fetchPosts: 'post/fetchPosts',
      loadMorePosts: 'post/loadMorePosts',
    }),
    createPost(post) {
      this.posts.push(post)
      this.dialogVisible = false
    },
    removePost(post) {
      this.posts = this.posts.filter(p => p.id !== post.id)
    },
    showDialog() {
      this.dialogVisible = true
    },
    async fetchPosts() {
      try {
        this.isPostsLoading = true
        const response = await axios.get(`https://jsonplaceholder.typicode.com/posts`, {
          params: {
            _page: this.page,
            _limit: this.limit,
          }
        })
        this.posts = response.data
        this.totalPages = Math.ceil(response.headers['x-total-count'] / this.limit)
      } catch (e) {
        alert('Download Error')
      } finally {
        this.isPostsLoading = false
      }
    },
    async loadMorePosts() {
      try {
        this.page += 1
        const response = await axios.get(`https://jsonplaceholder.typicode.com/posts`, {
          params: {
            _page: this.page,
            _limit: this.limit,
          }
        })
        this.posts = [...this.posts, ...response.data]
      } catch (e) {
        alert('Download Error')
      }
    },
    // changePage(pageNumber) {
    //   this.page = pageNumber
    // }
  },

  mounted() {
    this.fetchPosts()

    // let options = {
    //   root: null,
    //   rootMargin: '0px',
    //   threshold: 1.0
    // }
    // let callback = (entries, observer) => {
    //   if(entries[0].isIntersecting && this.page < this.totalPages) {
    //     this.loadMorePosts()
    //   }
    // }
    // let observer = new IntersectionObserver(callback, options);
    // observer.observe(this.$refs.observerRef)
  },

  computed: {
    ...mapState({
      posts: state => state.post.posts,
      isPostsLoading: state => state.post.isPostsLoading,
      selectedSort: state => state.post.selectedSort,
      sortOptions: state => state.post.sortOptions,
      searchQuery: state => state.post.searchQuery,
      page: state => state.post.page,
      limit: state => state.post.limit,
      totalPages: state => state.post.totalPages,
    }),
    ...mapGetters({
      sortedPosts: 'post/sortedPosts', 
      sortedAndSearchedPosts: 'post/sortedAndSearchedPosts', 
    }),
    sortedPosts() {
      return [...this.posts].sort((post1, post2) => {
        return post1[this.selectedSort]?.localeCompare(post2[this.selectedSort])
      })
    },
    sortedAndSearchedPosts() {
      return this.sortedPosts.filter(post => post.title.toLowerCase().includes(this.searchQuery.toLowerCase()))
    },
  },
  watch: {
    // page() {
    //   this.fetchPosts()
    // }
  },
}
</script>

<style>
  .app-btns {
    display: flex;
    justify-content: space-between;
    margin: 15px 0;
  }
  .page__wrapper {
    display: flex;
    margin-top: 15px;
  }
  .page {
    padding: 5px;
    border: 1px solid black;
    width: 30px;
    height: 30px;
    display: flex;
    justify-content: center;
    align-items: center;
    user-select: none;
  }
  .page:hover {
    cursor: pointer;
  }
  .page__wrapper > *:not(:last-child) {
    border-right: none;
  }
  .current-page {
    border: 2px solid teal !important;
  }
  .observer {
    height: 30px;
    background-color: none;
  }

</style>